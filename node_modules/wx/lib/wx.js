// Generated by CoffeeScript 1.7.1
(function() {
  var crypto, express, getRawBody, reply, xml2js, _, _s;

  _ = require('underscore');

  express = require('express');

  crypto = require('crypto');

  getRawBody = require('raw-body');

  xml2js = require('xml2js');

  _s = require('underscore.string');

  module.exports = function(_arg) {
    var router;
    this.token = _arg.token, this.app_id = _arg.app_id, this.app_secret = _arg.app_secret;
    router = express.Router();
    router.use((function(_this) {
      return function(_arg1, res, next) {
        var message, nonce, signature, timestamp, _ref;
        _ref = _arg1.query, signature = _ref.signature, timestamp = _ref.timestamp, nonce = _ref.nonce;
        message = _([_this.token, timestamp, nonce]).sort().join('');
        if (signature === crypto.createHash('sha1').update(message).digest('hex')) {
          return next();
        } else {
          return res.send(401);
        }
      };
    })(this));
    router.get('*', function(_arg1, res) {
      var echostr;
      echostr = _arg1.query.echostr;
      return res.send(echostr);
    });
    this.click_handlers = {};
    router.post('*', (function(_this) {
      return function(req, res, next) {
        return getRawBody(req, {
          length: req.headers['content-length'],
          limit: '1mb',
          encoding: 'utf8'
        }, function(err, string) {
          if (err) {
            return res.send(400);
          }
          return xml2js.parseString(string, function(err, result) {
            var click_handler, key, value, _ref;
            if (err) {
              return res.send(400);
            }
            _ref = result.xml;
            for (key in _ref) {
              value = _ref[key];
              req[_s.underscored(key)] = value[0];
            }
            _(res).extend(reply(req));
            switch (req.msg_type.toLowerCase()) {
              case 'text':
                return typeof this.text_handler === "function" ? this.text_handler(req, res) : void 0;
              case 'event':
                switch (req.event.toLowerCase()) {
                  case 'subscribe':
                    return typeof this.subscribe_handler === "function" ? this.subscribe_handler(req, res) : void 0;
                  case 'unsubscribe':
                    return typeof this.unsubscribe_handler === "function" ? this.unsubscribe_handler(req, res) : void 0;
                  case 'click':
                    if (click_handler = this.click_handlers[req.event_key.toLowerCase()]) {
                      return click_handler(req, res);
                    } else {
                      return res.send(200);
                    }
                    break;
                  default:
                    return res.send(200);
                }
                break;
              default:
                return res.send(200);
            }
          });
        });
      };
    })(this));
    return _.extend(router, {
      text: (function(_this) {
        return function(text_handler) {
          _this.text_handler = text_handler;
        };
      })(this),
      subscribe: (function(_this) {
        return function(subscribe_handler) {
          _this.subscribe_handler = subscribe_handler;
        };
      })(this),
      unsubscribe: (function(_this) {
        return function(unsubscribe_handler) {
          _this.unsubscribe_handler = unsubscribe_handler;
        };
      })(this),
      click: (function(_this) {
        return function(key, handler) {
          return _this.click_handlers[key.toLowerCase()] = handler;
        };
      })(this)
    });
  };

  reply = function(req) {
    var message;
    message = function(content) {
      return "<xml> <ToUserName><![CDATA[" + req.from_user_name + "]]></ToUserName> <FromUserName><![CDATA[" + req.to_user_name + "]]></FromUserName> <CreateTime>" + (~~(Date.now() / 1000)) + "</CreateTime> " + content + " </xml>";
    };
    return {
      text: function(content) {
        return this.send(message("<MsgType><![CDATA[text]]></MsgType> <Content><![CDATA[" + content + "]]></Content>"));
      },
      news: function(articles) {
        articles = [].concat(articles).map(function(_arg) {
          var description, pic_url, title, url;
          title = _arg.title, description = _arg.description, pic_url = _arg.pic_url, url = _arg.url;
          return "<item> <Title><![CDATA[" + title + "]]></Title> <Description><![CDATA[" + description + "]]></Description> " + (pic_url ? "<PicUrl><![CDATA[" + pic_url + "]]></PicUrl>" : '') + " <Url><![CDATA[" + url + "]]></Url> </item>";
        });
        return this.send(message("<MsgType><![CDATA[news]]></MsgType> <ArticleCount>" + articles.length + "</ArticleCount> <Articles>" + (articles.join('')) + "</Articles>"));
      }
    };
  };

}).call(this);
